{"version":3,"sources":["components/MemeGenerator/styledComponents.js","components/MemeGenerator/index.js","App.js","index.js"],"names":["AppContainer","styled","div","withConfig","displayName","componentId","MemeGeneratorContainer","Heading","h1","FormAndMemeContainer","MemeContainer","props","backgroundImage","TextContent","p","activeFontSizeId","MemeGeneratorForm","form","CustomLabel","label","CustomInput","input","CustomSelect","select","CustomOption","option","GenerateButton","button","fontSizesOptionsList","optionId","displayText","MemeGenerator","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","backgroundImageUrlInput","topTextInput","bottomTextInput","activeFontSizeOptionId","backgroundImageUrl","topText","bottomText","onChangeBackgroundImage","event","setState","target","value","onChangeTopTextInput","onChangeBottomTextInput","onChangeFontSizeOptionID","onGenerateMeme","preventDefault","_this$state","renderMemeGeneratorForm","_this$state2","_jsxs","onSubmit","children","_jsx","htmlFor","type","id","onChange","placeholder","map","eachOption","renderMeme","_this$state3","_inherits","_createClass","key","this","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f5fdcef.chunk.js","sourcesContent":["import styled from 'styled-components/macro'\n\nexport const AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n`\nexport const MemeGeneratorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 550px;\n  padding-top: 32px;\n  padding-right: 24px;\n  padding-bottom: 32px;\n  padding-left: 24px;\n  @media screen and (min-width: 768px) {\n    width: 85%;\n    max-width: 1140px;\n  }\n`\nexport const Heading = styled.h1`\n  color: #35469c;\n  font-family: 'Open Sans';\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 16px;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n    text-align: left;\n  }\n`\n\nexport const FormAndMemeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  @media screen and (min-width: 768px) {\n    flex-direction: row-reverse;\n  }\n`\nexport const MemeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  text-align: center;\n  background-image: url(${props => props.backgroundImage});\n  background-size: cover;\n  height: 300px;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-bottom: 50px;\n  @media screen and (min-width: 768px) {\n    width: 48%;\n    margin-top: 5px;\n    margin-bottom: 20px;\n  }\n`\nexport const TextContent = styled.p`\n  color: #ffffff;\n  font-size: ${props => props.activeFontSizeId}px;\n  font-weight: 600;\n  font-family: 'Open Sans';\n`\n\nexport const MemeGeneratorForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  @media screen and (min-width: 768px) {\n    width: 40%;\n  }\n`\n\nexport const CustomLabel = styled.label`\n  color: #7e858e;\n  font-family: 'Open Sans';\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.4;\n  margin-bottom: 0px;\n`\n\nexport const CustomInput = styled.input`\n  color: #5a7184;\n  background-color: #ffffff;\n  font-family: 'Open Sans';\n  height: 40px;\n  border: 1px solid #d7dfe9;\n  border-radius: 5px;\n  padding-top: 12px;\n  padding-right: 14px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n  margin-top: 5px;\n  margin-bottom: 20px;\n  outline: none;\n`\n\nexport const CustomSelect = styled.select`\n  color: #1e293b;\n  background-color: #ffffff;\n  font-family: 'Open Sans';\n  height: 40px;\n  border: 1px solid #d7dfe9;\n  border-radius: 5px;\n  padding: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  outline: none;\n`\nexport const CustomOption = styled.option`\n  font-size: 16px;\n  padding-top: 12px;\n  padding-right: 14px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n`\n\nexport const GenerateButton = styled.button`\n  color: #ffffff;\n  background-color: #0b69ff;\n  font-family: 'Open Sans';\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 6px;\n  border: none;\n  min-width: 25px;\n  max-width: 150px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: 24px;\n  margin-top: 15px;\n  cursor: pointer;\n  outline: none;\n`\n","import {Component} from 'react'\n\nimport {\n  AppContainer,\n  MemeGeneratorContainer,\n  Heading,\n  FormAndMemeContainer,\n  MemeContainer,\n  TextContent,\n  MemeGeneratorForm,\n  CustomLabel,\n  CustomInput,\n  CustomSelect,\n  CustomOption,\n  GenerateButton,\n} from './styledComponents'\n\nconst fontSizesOptionsList = [\n  {\n    optionId: '8',\n    displayText: '8',\n  },\n  {\n    optionId: '12',\n    displayText: '12',\n  },\n  {\n    optionId: '16',\n    displayText: '16',\n  },\n  {\n    optionId: '20',\n    displayText: '20',\n  },\n  {\n    optionId: '24',\n    displayText: '24',\n  },\n  {\n    optionId: '28',\n    displayText: '28',\n  },\n  {\n    optionId: '32',\n    displayText: '32',\n  },\n]\n\nclass MemeGenerator extends Component {\n  state = {\n    backgroundImageUrlInput: '',\n    topTextInput: '',\n    bottomTextInput: '',\n    activeFontSizeOptionId: fontSizesOptionsList[0].optionId,\n    backgroundImageUrl: '',\n    topText: '',\n    bottomText: '',\n    activeFontSizeId: '',\n  }\n\n  onChangeBackgroundImage = event => {\n    this.setState({backgroundImageUrlInput: event.target.value})\n  }\n\n  onChangeTopTextInput = event => {\n    this.setState({topTextInput: event.target.value})\n  }\n\n  onChangeBottomTextInput = event => {\n    this.setState({bottomTextInput: event.target.value})\n  }\n\n  onChangeFontSizeOptionID = event => {\n    this.setState({activeFontSizeOptionId: event.target.value})\n  }\n\n  onGenerateMeme = event => {\n    event.preventDefault()\n    const {\n      backgroundImageUrlInput,\n      topTextInput,\n      bottomTextInput,\n      activeFontSizeOptionId,\n    } = this.state\n\n    this.setState({\n      backgroundImageUrl: backgroundImageUrlInput,\n      topText: topTextInput,\n      bottomText: bottomTextInput,\n      activeFontSizeId: activeFontSizeOptionId,\n    })\n  }\n\n  renderMemeGeneratorForm = () => {\n    const {\n      activeFontSizeOptionId,\n      backgroundImageUrlInput,\n      topTextInput,\n      bottomTextInput,\n    } = this.state\n\n    return (\n      <MemeGeneratorForm onSubmit={this.onGenerateMeme}>\n        <CustomLabel htmlFor=\"backgroundImageUrl\">Image URL</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"backgroundImageUrl\"\n          value={backgroundImageUrlInput}\n          onChange={this.onChangeBackgroundImage}\n          placeholder=\"Enter the Image URL\"\n        />\n        <CustomLabel htmlFor=\"topText\">Top Text</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"topText\"\n          value={topTextInput}\n          onChange={this.onChangeTopTextInput}\n          placeholder=\"Enter the Top Text\"\n        />\n        <CustomLabel htmlFor=\"topText\">Bottom Text</CustomLabel>\n        <CustomInput\n          type=\"text\"\n          id=\"bottomText\"\n          value={bottomTextInput}\n          onChange={this.onChangeBottomTextInput}\n          placeholder=\"Enter the Bottom Text\"\n        />\n        <CustomLabel htmlFor=\"select\">Font Size</CustomLabel>\n        <CustomSelect\n          id=\"select\"\n          value={activeFontSizeOptionId}\n          onChange={this.onChangeFontSizeOptionID}\n        >\n          {fontSizesOptionsList.map(eachOption => (\n            <CustomOption key={eachOption.optionId} value={eachOption.optionId}>\n              {eachOption.displayText}\n            </CustomOption>\n          ))}\n        </CustomSelect>\n        <GenerateButton type=\"submit\">Generate</GenerateButton>\n      </MemeGeneratorForm>\n    )\n  }\n\n  renderMeme = () => {\n    const {\n      backgroundImageUrl,\n      topText,\n      bottomText,\n      activeFontSizeId,\n    } = this.state\n\n    return (\n      <MemeContainer data-testid=\"meme\" backgroundImage={backgroundImageUrl}>\n        <TextContent activeFontSizeId={activeFontSizeId}>{topText}</TextContent>\n        <TextContent activeFontSizeId={activeFontSizeId}>\n          {bottomText}\n        </TextContent>\n      </MemeContainer>\n    )\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <MemeGeneratorContainer>\n          <Heading>Meme Generator</Heading>\n          <FormAndMemeContainer>\n            {this.renderMeme()}\n            {this.renderMemeGeneratorForm()}\n          </FormAndMemeContainer>\n        </MemeGeneratorContainer>\n      </AppContainer>\n    )\n  }\n}\n\nexport default MemeGenerator\n","import MemeGenerator from './components/MemeGenerator'\n\nimport './App.css'\n\nconst App = () => <MemeGenerator />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}